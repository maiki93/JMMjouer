## 
# Similar Makefile for use with windows msvc tools
#

debug = yes
RELEASE ?= 0
ifeq ($(RELEASE),1)
	debug = no
endif

# compiler msvc and linker
CC = cl.exe
# linker
LINK = link.exe
# ilk files generated, incremental link
#   https://learn.microsoft.com/en-us/cpp/build/reference/incremental-link-incrementally?view=msvc-170
# exp files, import/export libraries
#   https://stackoverflow.com/questions/2727020/what-is-the-use-of-exp-and-what-is-the-difference-between-lib-and-dll
# 	https://learn.microsoft.com/en-us/cpp/build/reference/working-with-import-libraries-and-export-files?view=msvc-170
LFLAGS = /nologo
# finally lib.exe is certainly called at the final stage, more option could choose what to export

# List of subdirectories containing a Module.win.mk file
# for windows, use all modules and no recursive (!= ming64 for clogger)
MODULES := clogger ccontainer joueur record jmmjouer src_plugin executables # game_loader tests

# Compile source, default name *obj on windows, adviced to keep it
# /O1, /O2 optimisation , /Ox 'best' optimization'
# /W4 adviced, /Wall , /WX : warning as error
# /EHsc : found often, to check
# /Tc : c source file, default if filename is *.c  ANSI C89 + Microsoft extension. 
#       /Za to take out some of those, a bit like C99 but not exactly
# /std:c11,c17, /Za closer to C89
# /Zi : generate PDB for use when debugging (do not affect optimisation) and pass option /DEBUG to linker
# /D_CRT_SECURE_NO_WARNINGS warning microsoft strcpy_s,scanf_s etc
CFLAGS = /nologo /W4 /D_CRT_SECURE_NO_WARNINGS -I.
# /WX to add again after debug
# /Wall = > /wd4255 /wd5045 and still more + cmocka problems
# 4131 for getopt "declarateur obsolete"

# 4113 : parameter void **state missing in unit test function
CFLAGS_TESTS = /nologo /W4 /D_CRT_SECURE_NO_WARNINGS /wd4113 -I.

## TU library: CMocka it is 64 bit compilation
INCLUDE_CMOCKA = C:\dev\cmocka_local_msvc\include
LIB_CMOCKA = C:\dev\cmocka_local_msvc\lib

# standard configurable
# /std:c11
# msvc /za closer to c89
#STD = /Za # winnt error !

# can choose which modules are build as static or shared libraries
LIB_DYNAMIC =  libccontainer libclogger librecord
# problem of (not) export in game_loader, need static only for this module
# to try equivalent --export-all like with mingw64_gcc
LIB_STATIC = libgame_loader libjoueur

# define main executable and with NO_LIB=1 no libraries created
NO_LIB ?= 0
ifeq ($(NO_LIB),0)
	EXE:= JMMjouer
	SHARED_EXPORT = /DwithLIB /Dshared_EXPORTS
else
	EXE:= JMMjouer_nolib
	undefine SHARED_EXPORT
	undefine LIB_STATIC
	undefine LIB_DYNAMIC
endif

ifeq ($(debug),yes)          # separator mandatory between ifeq and '('
	CFLAGS += /Zi /Od /DJMMJ_DEBUG
	CFLAGS_TESTS += /Zi /Od /DJMMJ_DEBUG
else
# 'best' optimization msvc
	CFLAGS += /Ox
	CFLAGS_TESTS += /Ox
endif

$(info == Makefile Windows ROOT ==)
$(info $$RELEASE is $(RELEASE) )
$(info $$MAKECMDGOALS is $(MAKECMDGOALS) )
$(info $$NO_LIB is $(NO_LIB) )
$(info $$CC is $(CC) )
$(info $$CFLAGS is $(CFLAGS) )
$(info $$CFLAGS_TESTS is $(CFLAGS_TESTS) )
$(info $$LINK is $(LINK) )
$(info $$LFLAGS is $(LFLAGS) )
$(info $$EXE is $(EXE) )
$(info $$LIB_STATIC is $(LIB_STATIC) )
$(info $$LIB_DYNAMIC is $(LIB_DYNAMIC) )

# search for all *.c files and make *.o files
# SRCS := $(wildcard *.c)
# OBJS := $(patsubst %.c, %.o, $(SRCS))
# take away main.o to avoid mutliple main() functions
# OBJS := $(filter-out main.o, $(OBJS))

#.PHONY : all clean unit_test
# make all, generic way to use make produce executable JMMjouer
all: $(EXE) unit_test

### FOR TU, possible in windows ?

# general rule for compiling c files when header file is available
# msvc must extract directory path for option /Fo (output directory)
# acthung ! $SHARED_EXPORT only for dynamic linkage (export _imp_ )
#     https://stackoverflow.com/questions/4841719/dllimport-dllexport-and-static-libraries-compilation-under-visual-c

# filename fixed , not used anymore ??
%.obj: %.c %.h
	@echo "Build file generic rule with header in root:   $@"
	@echo "<:   $<" # all dependencies
	@echo "^:   $^" # all dependencies
	@echo "?:   $?" # all dependencies newer than target
	@echo "dir from target: $(dir $@)"
	$(CC) $(STD) $(CFLAGS) $(SHARED_EXPORT) /c $< /Fo"$(dir $@)"

# general rule, no header file associated (ex. main.c)
%.obj: %.c
	@echo "Build file generic rule without header in root:   $@"
	$(CC) $(STD) $(CFLAGS) $(SHARED_EXPORT) /c $< /Fo"$(dir $@)"

# include the description for each module
include $(patsubst %,%/Module.win.mk,$(MODULES))

# to try generic rule to build TU
# not possible on windows, depends if linked to static or shared lib, really ?
# still used ? yes for some test_X main test executable
$(OBJS_ALL_TESTS): %.obj: %.c
	@echo "Build *.o overriden generic rules in root for all tests:   $@"
	@echo "dir @ : $(dir $@)"
# with LIB no change for ccontainer tests...
	$(CC) /Zi $(CFLAGS_TESTS) /c $< /I. /I"$(INCLUDE_CMOCKA)" /Fo"$(dir $@)"
#	$(CC) /Zi $(CFLAGS_TESTS) /DwithLIB /c $< /I. /I"$(INCLUDE_CMOCKA)" /Fo"$(dir $@)"

$(info == ROOT after include modules ==)
$(info $$OBJS_ALL_STATIC is $(OBJS_ALL_STATIC) )
$(info $$OBJS_ALL_TESTS  is $(OBJS_ALL_TESTS) )

# call clean here and in subdirectories
clean::
	echo "Clean in root directory"
	del vc140.pdb
