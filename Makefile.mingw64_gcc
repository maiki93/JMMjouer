# many tricks
# https://stackoverflow.com/questions/53136024/makefile-to-compile-all-c-files-without-needing-to-specify-them
# https://accu.org/journals/overload/14/71/miller_2004/ famous paper: recursive make considered harmful

# default
debug = yes
RELEASE ?= 0
ifeq ($(RELEASE),1)
	debug = no
endif

# compilers, may give different errors/warning
CC = gcc
#CC = clang

LINK = ld
LFLAGS = --warn-common -shared -z defs --no-allow-shlib-undefined -lc

# List of subdirectories containing a Module.mk file
#MODULES := tests tests/test_mock
# clogger call by an explicit make, no use of module
# game_loader moved into jmmjouer
MODULES := ccontainer joueur record # game_loader #tests

# see advices (and much more than compilation options) https://matt.sh/howto-c
# compiler option, activate many warning( here seeems common to gcc and clang)
# pedantic => -Wpedantic gcc new
# -fno-inline ? 
# -Wno-unused-local-typedefs no need
# -Wstrict-overflow=5, make pass game_morpion compilation
# -Wunused -W (included already)
# -fPIC on Windows, not adviced ?
#       on linux not for performance ? but cannot comile, give error !
# -g3 : all debug information + MACRO (-g0 : no debug ), -g default 2
# -ggdb : include gdb extension if possible (not tested)
# add include path current
CFLAGS = -Wall -Wextra -pedantic -Wno-variadic-macros -I .
# to include again:  -Werror, better than Wno-X warning appears but compiles fine

# standard configurable
# gcc c89/90 : -ansi, -std=c90 or -std=iso9899:1990
STD = -std=c90

# standard gcc defines usually NDEBUG for release code (assert.h affected)
# code uses internally a JMMJ_DEBUG, defined in preprocessor stage 
# 	or declare directly here ? better will apply to all files without need to include a common header ?
ifeq ($(debug),yes)          # separator mandatory between ifeq and '('
# use specific code for the project, g3 to include MACRO definition as variables
	CFLAGS += -g3 -O0 -DJMMJ_DEBUG
else
# kind of standard with gcc projects
	CFLAGS += -DNDEBUG -O2
endif

# search for all *.c files and make *.o files
# keep for example
#SRCS := $(wildcard *.c)
#OBJS := $(patsubst %.c, %.o, $(SRCS))
# take away main.o to avoid mutliple main() functions
#OBJS := $(filter-out main.o, $(OBJS))

# Use explicit OBJS, more control
# do not include main.o
# replace step-by-step by library : 
# 	clogger : clogger.o,
#   ccontainer : clist_generic.o clist_cstring.o
#   record : irecord.o file_record.o
#   joueur :cmap_game_victories.o person.o joueur.o # victory ?? only header ??
#		then include victory.o
#   game_loader : plugin_manager.o cmap_ptrf_game.o game_loader.o
#OBJS_EXE = utils.o utils_file.o arcade.o
# will be created
#OBJS_CORE += $(OBJS)

# define main executable
NO_LIB ?= 0
ifeq ($(NO_LIB),0)
	EXE:= JMMjouer
else
	EXE:= JMMjouer_nolib
endif

# inspect variables
$(info == Makefile ROOT ==)
$(info $$NO_LIB is $(NO_LIB) )
$(info $$RELEASE is $(RELEASE) )
$(info $$CC is $(CC) )
$(info $$CFLAGS is $(CFLAGS) )
$(info $$LINK is $(LINK) )
$(info $$LFLAGS is $(LFLAGS) )
$(info $$MAKECMDGOALS is $(MAKECMDGOALS) )
$(info $$EXE is $(EXE) )

# libclogger apart
LIB_STATIC = libccontainer libclogger libjoueur #libgame_loader
# libjouer : linked with -shared -Bstatic against libclogger and libccontainer
# librecord need only libjoueur ! (good, bad ?) cannot really works ?
LIB_DYNAMIC = libgame_loader librecord

# alternative to target as files
#.PHONY : all clean unit_test
# commented, maybe not bad..
#.PHONY : dep_lib
#dep_lib : libclogger.a libccontainer.a libjoueur.dll librecord.dll libgame_pendu.dll
#.PHONY : all clean unit_test

# make all, generic way to use make produce executable JMMjouer
#all: $(EXE)
# necessary for vscode-makefile.tool ?
all : JMMjouer
# unit_test

### FOR TU
CFLAGS_TESTS = -g3 -W -Wall -fPIC -Wunused -Wextra -pedantic -Wstrict-overflow=5 -Wno-unused-local-typedefs -fno-inline
# need c99 standard to use cmocka
# gnu implements inline -std=gnu89 or -fgnu89-inline but does not seem to work. Other errors appears with c89
STD_TESTS = -std=c99
INCLUDE_CMOCKA = C:\dev\cmocka_local_mingw\include
LIB_CMOCKA = C:\dev\cmocka_local_mingw\lib

# specific target for unit testing in tests/ , dependencies with CMocka
unit_test::
# unit_test_mock::

# general rule for compiling c files when header file is available
# gcc, but on windows. should be better named *.obj or *.o ?
# objdump -a *.o gives pe-x86-64, default format is bsd 
%.o: %.c %.h
	@echo "Build file generic rule with header in root:   $@"
	$(CC) $(STD) $(CFLAGS) -c $< -o $@

# general rule, no header file associated (ex. main.c)
%.o: %.c
	@echo "Build file generic rule without header in root:   $@"
	$(CC) $(STD) $(CFLAGS) -c $< -o $@

# include the description for each module
include $(patsubst %,%/Module.mingw64_gcc.mk,$(MODULES))

# include core in jmmjouer, could be in MODULES
include jmmjouer/Module.mingw64_gcc.mk

# only for plugins, could in MODULES
include src_plugin/Module.mingw64_gcc.mk

$(info == ROOT after include modules ==)
$(info $$OBJS_ALL_STATIC is $(OBJS_ALL_STATIC) )
$(info $$OBJS_ALL_TESTS  is $(OBJS_ALL_TESTS) )

# default build for test_X, must be defined after include Modules
# can be ovewritten in specific modules
$(OBJS_ALL_TESTS): %.o: %.c
	@echo "Build *.o overriden generic rules for tests:   $@"
	$(CC) $(STD_TESTS) $(CFLAGS_TESTS) -c $< -o $@ -I . -I $(INCLUDE_CMOCKA)


$(info)
$(info == ROOT 2 ==)
$(info $$OBJS is [$(OBJS)] )
$(info $$OBJS_CORE is [$(OBJS_CORE)] )
$(info $$OBJS_GM is [$(OBJS_GM)] )
$(info dir: $(dir $(lastword $(MAKEFILE_LIST))) )
# seems very convenient ! but not
#currentDir = $(dir $(lastword $(MAKEFILE_LIST)))

#### libraries in dependencies,
## usefull to copy ? or better to include in a common path (e.g. for TU ?)

# should pass if ARCHIVE or SHARED lib to clogger Makefile
ifneq ($(findstring libccontainer,$(LIB_STATIC)),)
IMPORT_LIB_CLOGGER = clogger
TARGET_CLOGGER = libclogger.a
else
IMPORT_LIB_CLOGGER = clogger_dll
TARGET_CLOGGER = libclogger.dll
endif

libclogger : 
#	cd clogger && make -f Makefile.mingw64_gcc $@
# && cd .. necessary ?
	cd clogger && make -f Makefile.mingw64_gcc $(TARGET_CLOGGER)
	cp clogger/libclogger* .

# call clean here and in subdirectories
clean::
	@echo "Clean in root directory"
	rm -f ./*.o
	cd clogger && make -f Makefile.mingw64_gcc clean
	rm -f libclogger.a libclogger.dll libclogger_dll.a

