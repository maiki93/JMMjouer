# version linux (tested wsl2/ubuntu)
# use gcc, very similar except: 
#	- standard name of libraries
# + code modification (windows / posix ), visibility of variable in object file / library 

# many tricks
# https://stackoverflow.com/questions/53136024/makefile-to-compile-all-c-files-without-needing-to-specify-them
# https://accu.org/journals/overload/14/71/miller_2004/ famous paper: recursive make considered harmful
# https://stackoverflow.com/questions/7891097/what-are-double-colon-rules-in-a-makefile-for
# https://stackoverflow.com/questions/2145590/what-is-the-purpose-of-phony-in-a-makefile

# debug option, override with make all debug=no CFLAGS=-std=c99
# yes, use in code of JMMJ_DEBUG (example in main.c), and -g four building in debug mode( possibility to use a debugger)
# no, compile with optimization -O2
debug = yes
RELEASE ?= 0
ifeq ($(RELEASE),1)
	debug = no
endif

# List of subdirectories containing a Module.mk file
MODULES := clogger ccontainer joueur record jmmjouer src_plugins executables

# compilers, may give different errors/warning
# â€œ-save-temps" to see *.i file
CC = gcc
#CC = clang

LINK = ld
## -r --relocatable
## --just-symbols=filename
# -t --trace
# --fatal-warnings
# -M --print-map / --cref / -Map mapfile
# -u --undefined=symbol
# -x / -X --discard_X
# -Bdynamic / -Bstatic : see: -Bstatic -shared (for joueur)
# -Bsymbolic : change default
# --no-undefined / -z defs
# --allow-shlib-undefined / --no-allow...(allow default)
# --unresolved-symbols=method (default 'report-all')
# --warn-common / --warn-X
# --wrap : e.g. cmocka, malloc
# MyCStock -g -shared -Wl,-z,defs (not undefined in)
# -Wl,--no-allow-shlib-undefined

# PE386 specificity : --export-all-symbols ( default, if NO EXPORT)
#     --output-def file
# -Wl,--subsystem,windows (for PE target)
#LFLAGS = --verbose --print-map -Map mapfile_joueur
# --no-undefined-version : ?
# -z defs : Disallows undefined symbols in object files. Undefined symbols in
#		shared libraries are still allowed
# this options implies use of -lc, linkage to glibc (for malloc,free... definitions) 
# --no-allow-shlib-undefined : makes the linker treat any undefined symbols in shared libraries linked in as errors. 
#      In other words, this option prevents linker from creating shared libraries that are missing indirect dependencies.
LFLAGS = --warn-common -shared -z defs --no-allow-shlib-undefined -lc

# see advices (and much more than compilation options) https://matt.sh/howto-c
# compiler option, activate many warning( here seeems common to gcc and clang)
# pedantic => -Wpedantic gcc new
# -fno-inline ? 
# -Wno-unused-local-typedefs no need
# -Wstrict-overflow=5, make pass game_morpion compilation
# -Wunused -W (included already)
# -fPIC on Windows, not adviced ? 
#       on linux not for performance ? but cannot comile, give error !
# -g3 : all debug information + MACRO (-g0 : no debug ), -g default 2
# -ggdb : include gdb extension if possible (not tested)
# -fno-common : to look more, advice not clear
CFLAGS = -Wall -Wextra -pedantic -fPIC -Wno-variadic-macros -I.
# to include again:  -Werror, better than Wno-X warning appears but compiles fine

# standard configurable
# gcc c89/90 : -ansi, -std=c90 or -std=iso9899:1990
STD = -std=c90

### Apply by default for TU, can be overriden inside each module
CFLAGS_TESTS = -g3 -W -Wall -fPIC -Wunused -Wextra -pedantic -Wstrict-overflow=5 -Wno-unused-local-typedefs -fno-inline
# need c99 standard to use cmocka
# gnu implements inline -std=gnu89 or -fgnu89-inline but does not seem to work. Other errors appears with c89
STD_TESTS = -std=c99

##### External libraries
# use of Windows CMocka from wsl2-linux !? yep , working !
INCLUDE_CMOCKA = C:\dev\cmocka_local_mingw\include
LIB_CMOCKA = C:\dev\cmocka_local_mingw\lib

# standard gcc defines usually NDEBUG for release code (assert.h affected)
# code uses internally a JMMJ_DEBUG, defined in preprocessor stage 
# 	or declare directly here ? better will apply to all files without need to include a common header ?
ifeq ($(debug),yes)          # separator mandatory between ifeq and '('
# use specific code for the project, g3 to include MACRO definition as variables
	CFLAGS += -g3 -O0 -DJMMJ_DEBUG
else
# -DNDEBUG kind of standard with gcc projects
	CFLAGS += -DNDEBUG -O2
endif

$(info == Makefile ROOT ==)
$(info $$NO_LIB is $(NO_LIB) )
$(info $$RELEASE is $(RELEASE) )
$(info $$CC is $(CC) )
$(info $$CFLAGS is $(CFLAGS) )
$(info $$LINK is $(LINK) )
$(info $$LFLAGS is $(LFLAGS) )
$(info $$MAKECMDGOALS is $(MAKECMDGOALS) )
$(info $$EXE is $(EXE) )

# updated from the visit in all modules, no need to define here (would still be better)
#OBJS_ALL_STATIC = ''
#OBJS_ALL_TESTS = ''

### Libraries compilation,
# 	suprees libgame_loader included in jmmjouer now.to see later.
# libgame_pendu always shared and linked at compilation
LIB_STATIC = libclogger libccontainer
# libjouer : linked with -shared -Bstatic against libclogger and libccontainer
# librecord need only libjoueur ! (good, bad ?) cannot really works ?
LIB_DYNAMIC = libjoueur librecord 

# on mingw => error JMMjouer
#LIB_DYNAMIC = libclogger libjoueur
#LIB_STATIC = librecord libccontainer

# moved before for EXE
# include the description for each module, will be recursive if submodules
include $(patsubst %,%/Module.linux.mk,$(MODULES))

# alternative to target as files
.PHONY : all clean unit_test
# make all, generic way to use make produce executable JMMjouer
all: $(EXE) unit_test

# specific target for unit testing, dependencies with CMocka
unit_test::

# general rule for compiling c files when header file is available 
%.o: %.c %.h
	@echo "Build file generic rule with header in root:   $@"
	$(CC) $(STD) $(CFLAGS) -c $< -o $@

# general rule, no header file associated (ex. main.c)
%.o: %.c
	@echo "Build file generic rule without header in root:   $@"
	$(CC) $(STD) $(CFLAGS) -c $< -o $@

$(info == ROOT after include modules ==)
$(info $$OBJS_ALL_STATIC is $(OBJS_ALL_STATIC) )
$(info $$OBJS_ALL_TESTS  is $(OBJS_ALL_TESTS) )

# default build for test_X, must be defined after include Modules
# can be ovewritten in specific modules
$(OBJS_ALL_TESTS): %.o: %.c
	@echo "Build *.o overriden generic rules for tests:   $@"
	$(CC) $(STD_TESTS) $(CFLAGS_TESTS) -c $< -o $@ -I . -I $(INCLUDE_CMOCKA)

# call clean here and in subdirectories
clean::
	@echo "Clean in root directory"
	rm -f ./*.o
	rm -f ./*.so ./*.a

