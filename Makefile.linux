# version linux (tested wsl2/ubuntu)
# use gcc, very similar except: 
#	- standard name of libraries
# + code modification (windows / posix ), visibility of variable in object file / library 

# many tricks
# https://stackoverflow.com/questions/53136024/makefile-to-compile-all-c-files-without-needing-to-specify-them
# https://accu.org/journals/overload/14/71/miller_2004/ famous paper: recursive make considered harmful
# https://stackoverflow.com/questions/7891097/what-are-double-colon-rules-in-a-makefile-for
# https://stackoverflow.com/questions/2145590/what-is-the-purpose-of-phony-in-a-makefile

# debug option, override with make all debug=no CFLAGS=-std=c99
# yes, use in code of JMMJ_DEBUG (example in main.c), and -g four building in debug mode( possibility to use a debugger)
# no, compile with optimization -O2
debug = yes
#debug = no

# compilers, may give different errors/warning
CC = gcc
#CC = clang

LINK = ld
#LFLAGS

# List of subdirectories containing a Module.mk file
#MODULES := tests tests/test_mock
MODULES := clogger ccontainer joueur record game_loader #tests

# see advices (and much more than compilation options) https://matt.sh/howto-c
# compiler option, activate many warning( here seeems common to gcc and clang)
# pedantic => -Wpedantic gcc new
# -fno-inline ? 
# -Wno-unused-local-typedefs no need
# -Wstrict-overflow=5, make pass game_morpion compilation
# -Wunused -W (included already)
# -fPIC on Windows, not adviced ? 
#       on linux not for performance ? but cannot comile, give error !
# -g3 : all debug information + MACRO (-g0 : no debug ), -g default 2
# -ggdb : include gdb extension if possible (not tested)
CFLAGS = -Wall -Wextra -pedantic -fPIC -I . -Wno-variadic-macros #-Wno-strict-overflow
# to include again:  -Werror, better than Wno-X warning appears but compiles fine

# standard configurable
# gcc c89/90 : -ansi, -std=c90 or -std=iso9899:1990
STD = -std=c90

# standard gcc defines usually NDEBUG for release code (assert.h affected)
# code uses internally a JMMJ_DEBUG, defined in preprocessor stage 
# 	or declare directly here ? better will apply to all files without need to include a common header ?
ifeq ($(debug),yes)          # separator mandatory between ifeq and '('
# use specific code for the project, g3 to include MACRO definition as variables
	CFLAGS += -g3 -O0 -DJMMJ_DEBUG
else
# kind of standard with gcc projects
	CFLAGS += -DNDEBUG -O2
endif

WITH_LIB ?= 1
# equivalent is
#ifeq ($(origin WITH_LIB), undefined)
# WITH_LIB = 1
#endif

#ifndef $(WITH_LIB)
#	WITH_LIB = 1
#else
#	WITH_LIB = 0
#endif

$(info == Makefile ROOT ==)
$(info $$WITH_LIB is $(WITH_LIB) )
$(info $$CC is $(CC) )
$(info $$CFLAGS is $(CFLAGS) )
$(info $$LINK is $(LINK) )
$(info $$LFLAGS is $(LFLAGS) )
$(info $$MAKECMDGOALS is $(MAKECMDGOALS) )

# Use explicit OBJS, more control
# do not include main.o
OBJS_EXE = utils.o utils_file.o arcade.o

# updated from visit in all modules, no need to define here (would still be better)
#OBJS_ALL_STATIC = ''
#OBJS_ALL_TESTS = ''

#NO_LIB = /DwithLIB
#ifeq ($(WITH_LIB),/DwithLIB)
ifeq ($(WITH_LIB),1)
	EXE:= JMMjouer
else
	EXE:= JMMjouer_nolib
endif

$(info $$EXE is $(EXE) )

LIB_STATIC = libclogger libccontainer libjoueur libgame_loader
LIB_DYNAMIC = librecord

# define list of unit_test found in all the hierarchy
# inspect variables
$(info $$OBJS is [$(OBJS_EXE)] )
$(info $$EXE is $(EXE) )

# alternative to target as files
.PHONY : all clean unit_test
# make all, generic way to use make produce executable JMMjouer
all: $(EXE)

### FOR TU
CFLAGS_TESTS = -g3 -W -Wall -fPIC -Wunused -Wextra -pedantic -Wstrict-overflow=5 -Wno-unused-local-typedefs -fno-inline
# need c99 standard to use cmocka
# gnu implements inline -std=gnu89 or -fgnu89-inline but does not seem to work. Other errors appears with c89
STD_TESTS = -std=c99
INCLUDE_CMOCKA = C:\dev\cmocka_local_mingw\include
LIB_CMOCKA = C:\dev\cmocka_local_mingw\lib

# specific target for unit testing in tests/ , dependencies with CMocka
unit_test::

# general rule for compiling c files when header file is available 
%.o: %.c %.h
	@echo "Build file generic rule with header in root:   $@"
	$(CC) $(STD) $(CFLAGS) -c $< -o $@

# general rule, no header file associated (ex. main.c)
%.o: %.c
	@echo "Build file generic rule without header in root:   $@"
	$(CC) $(STD) $(CFLAGS) -c $< -o $@

# include the description for each module
include $(patsubst %,%/Module.linux.mk,$(MODULES))
$(info == ROOT after include modules ==)
$(info $$OBJS_ALL_STATIC is $(OBJS_ALL_STATIC) )
$(info $$OBJS_ALL_TESTS  is $(OBJS_ALL_TESTS) )

# default build for test_X, must be defined after include Modules
# can be ovewritten in specific modules
$(OBJS_ALL_TESTS): %.o: %.c
	@echo "Build *.o overriden generic rules for tests:   $@"
	$(CC) $(STD_TESTS) $(CFLAGS_TESTS) -c $< -o $@ -I . -I $(INCLUDE_CMOCKA)


###### Main executables 
# -Wl,-rpath,dir1  or -rpath=dir1 # -Wl to pass argument to linker, rpath runtime to search for lib
#JMMjouer: $(OBJS_EXE) main.o libgame_pendu.so
#JMMjouer: $(OBJS_EXE) main.o libclogger.so
JMMjouer: $(OBJS_EXE) main.o $(LIB_STATIC) $(LIB_DYNAMIC)
	@echo "Build $(EXE): all dependencies $^"
	$(CC) -o $@ $(OBJS_EXE) main.o -L .  -lgame_loader -lrecord -ljoueur -lccontainer -lclogger

JMMjouer_nolib : main.o $(OBJS_EXE) $(OBJS_ALL_STATIC)
	@echo "Build JMMjouer_nolib ^: all dependencies $^"
	@echo "Build JMMjouer_nolib <: all dependencies $<"
	$(CC) $(STD) $(CFLAGS) -o $@ $^


##### compile shared library to include at compile-time
# linux, ask only for shared or static
#libgame_pendu.so : game_pendu.o game_pendu.h victory.o
#	$(CC) -shared $(CFLAGS) $^ -o $@

##### compile shared library to include at run-time (game_morpion)
# version unix-like available more recently in mingw
#libmorpion.dll : game_morpion.o game_morpion.h
#	$(CC) -shared game_morpion.o -o libmorpion.dll

# windows style, with importing lib, not used at run-time link anyway
libgame_morpion.so : game_morpion.o game_morpion.h victory.o
	$(CC) -shared $(CFLAGS) $^ -o $@

# call clean here and in subdirectories
clean::
	@echo "Clean in root directory"
	rm -f ./*.o
	rm -f ./*.so ./*.a
	rm -f JMMjouer JMMjouer_nolib
